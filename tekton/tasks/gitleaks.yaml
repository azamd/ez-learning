apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: >
      {"apiVersion":"tekton.dev/v1beta1","kind":"Task","metadata":{"annotations":{"tekton.dev/categories":"Security","tekton.dev/displayName":"Gitleaks","tekton.dev/pipelines.minVersion":"0.19.0","tekton.dev/platforms":"linux/amd64","tekton.dev/tags":"Security,
      Secrets"},"labels":{"app.kubernetes.io/version":"0.1"},"name":"gitleaks","namespace":"medaziz-amdouni-dev"},"spec":{"description":"This
      task makes it possible to use Gitleaks within your Tekton
      pipelines.\nGitleaks is a SAST tool for detecting hardcoded secrets like
      passwords, api keys, and tokens in git repos. It is an easy-to-use,
      all-in-one solution for finding secrets, past or present, in your
      code.","params":[{"description":"path to the repo to be
      scanned.","name":"repo_path","type":"string"},{"default":"","description":"url
      from where the config file would be
      fetched.","name":"config_file_url","type":"string"},{"default":"","description":"path
      to config
      file.","name":"config_file_path","type":"string"},{"default":"json","description":"format
      in which report will be generated. (json|csv|sarif)
      (default:\"json\")","name":"output_format","type":"string"},{"description":"path
      of file to save analysis
      report","name":"report_output_path","type":"string"},{"default":[],"description":"args","name":"args","type":"array"}],"steps":[{"image":"registry.access.redhat.com/ubi8/ubi-minimal:8.2","name":"fetch-config-file","script":"#!/usr/bin/env
      bash\n\nif [ -n \"$(params.config_file_url)\" ]\nthen\n curl
      \"$(params.config_file_url)\" --output \"$(params.config_file_path)\"\n
      echo \"Fetched the config file from given ($(params.config_file_url)) URL
      and successfully saved at
      $(workspaces.source.path)/$(params.config_file_path)\"\nelse\n echo \"No
      config file url was
      set\"\nfi\n","workingDir":"$(workspaces.source.path)"},{"args":["$(params.args)"],"image":"docker.io/zricethezav/gitleaks:v7.5.0@sha256:55b2e1831c7395f17e9da3649924736b396b25be69efdc7a0137073fe0b0f456","name":"detect-secret","script":"#!/bin/bash\n\ngitleaks
      --path=\"$(params.repo_path)\"
      --config-path=\"$(params.config_file_path)\" 
      \\\n--format=\"$(params.output_format)\"
      --report=\"$(params.report_output_path)\" \"$@\"\n\nEXIT_CODE=\"$?\"\nif [
      \"$EXIT_CODE\" -eq 0 ]\nthen\n echo \"No leaks found\"\n exit
      $EXIT_CODE\nelse\n echo \"============= Leaks found in code. Check
      generated report at $(params.report_output_path) ===============\"\n exit
      $EXIT_CODE\nfi\n","workingDir":"$(workspaces.source.path)"}],"workspaces":[{"description":"A
      workspace that contains fetched git repo.","name":"source"}]}}
    openshift.io/installed-from: tektonhub
    tekton.dev/categories: Security
    tekton.dev/displayName: Gitleaks
    tekton.dev/pipelines.minVersion: 0.19.0
    tekton.dev/platforms: linux/amd64
    tekton.dev/tags: 'Security, Secrets'
  resourceVersion: '350803675'
  name: gitleaks
  uid: 69207e2b-f37f-4f9e-bfea-0ae985e2089d
  creationTimestamp: '2023-07-05T18:43:40Z'
  generation: 9
  managedFields:
    - apiVersion: tekton.dev/v1beta1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            'f:kubectl.kubernetes.io/last-applied-configuration': {}
      manager: kubectl-client-side-apply
      operation: Update
      time: '2023-07-07T17:50:12Z'
    - apiVersion: tekton.dev/v1beta1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            .: {}
            'f:openshift.io/installed-from': {}
            'f:tekton.dev/categories': {}
            'f:tekton.dev/displayName': {}
            'f:tekton.dev/pipelines.minVersion': {}
            'f:tekton.dev/platforms': {}
            'f:tekton.dev/tags': {}
          'f:labels':
            .: {}
            'f:app.kubernetes.io/version': {}
        'f:spec':
          .: {}
          'f:description': {}
          'f:params': {}
          'f:steps': {}
          'f:workspaces': {}
      manager: Mozilla
      operation: Update
      time: '2023-07-07T18:58:01Z'
  namespace: medaziz-amdouni-dev
  labels:
    app.kubernetes.io/version: '0.1'
spec:
  description: >-
    This task makes it possible to use Gitleaks within your Tekton pipelines.

    Gitleaks is a SAST tool for detecting hardcoded secrets like passwords, api
    keys, and tokens in git repos. It is an easy-to-use, all-in-one solution for
    finding secrets, past or present, in your code.
  params:
    - description: path to the repo to be scanned.
      name: repo_path
      type: string
    - default: ''
      description: url from where the config file would be fetched.
      name: config_file_url
      type: string
    - default: ''
      description: path to config file.
      name: config_file_path
      type: string
    - default: json
      description: >-
        format in which report will be generated. (json|csv|sarif)
        (default:"json")
      name: output_format
      type: string
    - description: path of file to save analysis report
      name: report_output_path
      type: string
    - default: []
      description: args
      name: args
      type: array
  steps:
    - image: 'registry.access.redhat.com/ubi8/ubi-minimal:8.2'
      name: fetch-config-file
      resources: {}
      script: |
        #!/usr/bin/env bash

        if [ -n "$(params.config_file_url)" ]
        then
         curl "$(params.config_file_url)" --output "$(params.config_file_path)"
         echo "Fetched the config file from given ($(params.config_file_url)) URL and successfully saved at $(workspaces.source.path)/$(params.config_file_path)"
        else
         echo "No config file url was set"
        fi
      workingDir: $(workspaces.source.path)
    - args:
        - $(params.args)
      image: 'docker.io/nextail/gitleaks:latest'
      name: detect-secret
      resources: {}
      script: |
        #!/bin/bash

         gitleaks detect --report-path="$(params.repo_path)" --config="$(params.config_file_path)" --report-format="$(params.output_format)"


        EXIT_CODE="$?"
        if [ "$EXIT_CODE" -eq 0 ]
        then
         echo "No leaks found"
         exit $EXIT_CODE
        else
         echo "============= Leaks found in code. Check generated report at $(params.report_output_path) ==============="
         exit $EXIT_CODE
        fi
      workingDir: $(workspaces.source.path)
  workspaces:
    - description: A workspace that contains fetched git repo.
      name: source
